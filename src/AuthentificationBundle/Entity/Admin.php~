<?php

namespace AuthentificationBundle\Entity;

use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Security\Core\User\UserInterface;

/**
 * @ORM\Entity
 * @ORM\Table(name="admin")
 * @ORM\Entity(repositoryClass="AuthentificationBundle\Repository\AdminRepository")
 */

 class Admin implements UserInterface, \Serializable
{

     /**
      * @ORM\Column(type="integer")
      * @ORM\Id
      * @ORM\GeneratedValue(strategy="AUTO")
      */
     private $id;

     /**
      * @ORM\Column(type="string", length=25, unique=true)
      */
     private $username;

     /**
      * @ORM\Column(type="string", length=60, unique=true)
      */
     private $email;

     /**
      * @ORM\Column(type="string", length=64)
      */
     private $password;

     /**
      * @ORM\Column(name="is_active", type="boolean")
      */
     private $isActive;










     public function __construct()
     {
         $this->isActive = true;
         // may not be needed, see section on salt below
         // $this->salt = md5(uniqid(null, true));
     }

     public function serialize()
     {
         return serialize(array(
             $this->id,
             $this->username,
             $this->password,
             // see section on salt below
             // $this->salt,
         ));
     }

     public function unserialize($serialized)
     {
         list (
             $this->id,
             $this->username,
             $this->password,
             // see section on salt below
             // $this->salt
             ) = unserialize($serialized);
     }

     public function getRoles()
     {

         return array('ROLE_SUPER_ADMIN');

     }

     public function getPassword()
     {
         return $this->password;
     }

     public function getSalt()
     {
         // you *may* need a real salt depending on your encoder
         // see section on salt below
         return null;

     }

     public function getUsername()
     {
         return $this->username;
     }

     public function eraseCredentials()
     {

     }


 
    /**
     * Get id
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set username
     *
     * @param string $username
     *
     * @return Admin
     */
    public function setUsername($username)
    {
        $this->username = $username;

        return $this;
    }

    /**
     * Set email
     *
     * @param string $email
     *
     * @return Admin
     */
    public function setEmail($email)
    {
        $this->email = $email;

        return $this;
    }

    /**
     * Get email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->email;
    }

    /**
     * Set password
     *
     * @param string $password
     *
     * @return Admin
     */
    public function setPassword($password)
    {
        $this->password = $password;

        return $this;
    }

    /**
     * Set isActive
     *
     * @param boolean $isActive
     *
     * @return Admin
     */
    public function setIsActive($isActive)
    {
        $this->isActive = $isActive;

        return $this;
    }

    /**
     * Get isActive
     *
     * @return boolean
     */
    public function getIsActive()
    {
        return $this->isActive;
    }

    /**
     * Add pnc
     *
     * @param \AuthentificationBundle\Entity\user $pnc
     *
     * @return Admin
     */
    public function addPnc(\AuthentificationBundle\Entity\user $pnc)
    {
        $this->pnc[] = $pnc;

        return $this;
    }

    /**
     * Remove pnc
     *
     * @param \AuthentificationBundle\Entity\user $pnc
     */
    public function removePnc(\AuthentificationBundle\Entity\user $pnc)
    {
        $this->pnc->removeElement($pnc);
    }

    /**
     * Get pnc
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getPnc()
    {
        return $this->pnc;
    }

    /**
     * Add news
     *
     * @param \NewsBundle\Entity\news $news
     *
     * @return Admin
     */
    public function addNews(\NewsBundle\Entity\news $news)
    {
        $this->news[] = $news;

        return $this;
    }

    /**
     * Remove news
     *
     * @param \NewsBundle\Entity\news $news
     */
    public function removeNews(\NewsBundle\Entity\news $news)
    {
        $this->news->removeElement($news);
    }

    /**
     * Get news
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getNews()
    {
        return $this->news;
    }

    /**
     * Add vol
     *
     * @param \PfeBundle\Entity\CompanyEvents $vol
     *
     * @return Admin
     */
    public function addVol(\PfeBundle\Entity\CompanyEvents $vol)
    {
        $this->vols[] = $vol;

        return $this;
    }

    /**
     * Remove vol
     *
     * @param \PfeBundle\Entity\CompanyEvents $vol
     */
    public function removeVol(\PfeBundle\Entity\CompanyEvents $vol)
    {
        $this->vols->removeElement($vol);
    }

    /**
     * Get vols
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getVols()
    {
        return $this->vols;
    }

    /**
     * Add noteservice
     *
     * @param \NoteserviceBundle\Entity\Notesrv $noteservice
     *
     * @return Admin
     */
    public function addNoteservice(\NoteserviceBundle\Entity\Notesrv $noteservice)
    {
        $this->noteservice[] = $noteservice;

        return $this;
    }

    /**
     * Remove noteservice
     *
     * @param \NoteserviceBundle\Entity\Notesrv $noteservice
     */
    public function removeNoteservice(\NoteserviceBundle\Entity\Notesrv $noteservice)
    {
        $this->noteservice->removeElement($noteservice);
    }

    /**
     * Get noteservice
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getNoteservice()
    {
        return $this->noteservice;
    }
}
